connection = null;
tempState = null;

Square = function(sElement, bIndex, index){
	//allow squares to know where they are
	this.DOMObject = sElement;
	this.DOMObject.onclick = function(){
		var msg = bIndex.toString() +  index.toString() + "\0";
		console.log(msg);
		console.log("Board: "+ bIndex +"\tSquare: " + index + "\n");
		connection.send(msg);
	};
	this.board = bIndex;
	this.index = index;
}

Board = function(bElement, bIndex){
	var self = this;
	
	this.squares = [];
	Array.prototype.slice.call(bElement.getElementsByClassName("square")).forEach(function(square, index, array){
		self.squares[index] = new Square(square, bIndex, index);
	});
	this.DOMObject= bElement;
    //this.squares = element.getElementsByClassName("square");
}


/*=============================================================================
GAME INITIALIZATION
==============================================================================*/
Game = {};

Game.Initialize = function(){
    Game.version = 10.14;
    Game.beta = 1;
    Game.debug = 1;
    Game.boards = [];
	Game.DOMObject = document.getElementById("game");
	Game.playerSymbols = ['x','o'];
    Array.prototype.slice.call(document.getElementsByClassName("board")).forEach(function(element, index, array){
        Game.boards[index] = new Board(element, index);
    });
	Game.chat = {};
	Game.chat.DOMObject = document.getElementById("shader");
	Game.chat.chatTextInput = document.getElementById("chatText");
	Game.chat.chatHistory = document.getElementById("chatHistory");
	Game.chat.isVisible = true;
}

window.onload = function(){
    Game.Initialize();
	connection = connect();
	connection.onmessage = function (e) {
		if(e.data.substring(0,5) == "chat:" || e.data.substring(0,5) == "serv:"){
			var span = document.createElement('span');
			if(e.data.substring(0,5) == "chat:"){
				span.classList.add('chatMsg');
			} else {
				span.classList.add('servMsg');
			}
			span.innerHTML = e.data.substring(5);
			Game.chat.chatHistory.appendChild(span);
			//deal with chat
		} else {
			console.log(e.data);
			var state = JSON.parse(e.data);
			for(var i=0;i<Game.boards.length;i++){
				for(var j=0;j<Game.boards[i].squares.length;j++){
					//clear old value
					Game.boards[i].squares[j].DOMObject.innerHTML = "";
					if(state[i][j] > 0){
						//mark it
						var mark = Game.playerSymbols[state[i][j]-1];
						var span = document.createElement('span');
						span.classList.add(mark);
						span.innerHTML = mark;
						Game.boards[i].squares[j].DOMObject.appendChild(span);
					}
				}
			}
		}
	};
	connection.onclose = function (e) {
		console.log('Server Closed Connection');
	};


	document.addEventListener('keydown', function(event) {
		if(event.getModifierState("Control") && event.keyCode == 90){
			//ctrl-z
			if(Game.chat.isVisible){
				Game.chat.DOMObject.style.left = '-320px';
				Game.chat.isVisible = false;
				Game.DOMObject.className = "";
			} else {
				Game.chat.DOMObject.style.left = '0px';
				Game.chat.isVisible = true;
				Game.DOMObject.className = "small";
			}
		}
	});
}


/*===========================================================================
WEBSOCKET TESTING
===========================================================================*/
function connect(){
	//return new WebSocket('ws://172.25.2.108:8080');
	return new WebSocket('ws://localhost:8080');
}

function chatMsg(e){
	var msg = Game.chat.chatTextInput.value;
	Game.chat.chatTextInput.value = '';
	connection.send("chat:"+msg+"\0");
	return false;
}
